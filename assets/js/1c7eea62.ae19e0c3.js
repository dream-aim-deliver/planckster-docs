"use strict";(self.webpackChunkplanckster_docs=self.webpackChunkplanckster_docs||[]).push([[6297],{4053:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=t(4848),a=t(8453);const r={sidebar_label:"Kernel Planckster REST API",sidebar_position:1},i="Kernel Planckster REST API",o={id:"guides/kernel/kernel-planckster-api-walkthrough/index",title:"Kernel Planckster REST API",description:"We have set up a REST API for the Kernel Planckster.",source:"@site/docs/guides/kernel/kernel-planckster-api-walkthrough/index.md",sourceDirName:"guides/kernel/kernel-planckster-api-walkthrough",slug:"/guides/kernel/kernel-planckster-api-walkthrough/",permalink:"/planckster-docs/docs/guides/kernel/kernel-planckster-api-walkthrough/",draft:!1,unlisted:!1,editUrl:"https://github.com/dream-aim-deliver/planckster-docs/edit/main/docs/guides/kernel/kernel-planckster-api-walkthrough/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Kernel Planckster REST API",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Kernel Planckster",permalink:"/planckster-docs/docs/category/kernel-planckster"},next:{title:"Uploading source data",permalink:"/planckster-docs/docs/guides/kernel/upload-new-data"}},c={},l=[{value:"Basic Usage of Swagger UI and Kernel Planckster Checks",id:"basic-usage-of-swagger-ui-and-kernel-planckster-checks",level:2},{value:"Errors",id:"errors",level:3},{value:"Create/Register and List Endpoints",id:"createregister-and-list-endpoints",level:2},{value:"Schemas",id:"schemas",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"kernel-planckster-rest-api",children:"Kernel Planckster REST API"}),"\n",(0,s.jsx)(n.p,{children:"We have set up a REST API for the Kernel Planckster.\nThis API allows you to interact with the Kernel Planckster using HTTP requests.\nYou can use this API to upload new data, download data, and perform other operations on the Kernel Planckster."}),"\n",(0,s.jsxs)(n.p,{children:["A user interface has also been set up, based on ",(0,s.jsx)(n.a,{href:"https://swagger.io/tools/swagger-ui/",children:"Swagger UI"}),", to interact with this API.\nThis UI is reachable ",(0,s.jsx)(n.a,{href:"https://kernel-planckster.devmaany.com/docs#/",children:"at this URL"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Most of the activity of the Planckster Ecosystem is centralized in the Kernel, and as such, the Kernel provides basic endpoints to push the data into the ecosystem (which is, for example, what the ",(0,s.jsx)(n.a,{href:"/planckster-docs/docs/guides/kubeflow/kubeflow-features-and-ui-walkthrough",children:"Scrapers"})," do), and to list the available data (which is, for example, what the webserver ",(0,s.jsx)(n.a,{href:"/planckster-docs/docs/guides/websat/websat-features-and-ui-walkthrough",children:"Websat"})," does)."]}),"\n",(0,s.jsxs)(n.p,{children:["We will cover how to ",(0,s.jsx)(n.a,{href:"/planckster-docs/docs/guides/kernel/upload-new-data",children:"upload"})," and ",(0,s.jsx)(n.a,{href:"/planckster-docs/docs/guides/kernel/download-data",children:"download"})," using Kernel Planckster's API in the dedicated guides, so in this guide, we will cover the endpoints that allow us to (i) check that Kernel Planckster is available to use, (ii) list database entries for the different tables available, which map one-to-one to our ",(0,s.jsx)(n.a,{href:"/planckster-docs/docs/concepts/core-concepts/",children:"core concepts"})," (i.e., there's one database table per core concept), and (iii) create new instances of our core concepts."]}),"\n",(0,s.jsx)(n.h2,{id:"basic-usage-of-swagger-ui-and-kernel-planckster-checks",children:"Basic Usage of Swagger UI and Kernel Planckster Checks"}),"\n",(0,s.jsx)(n.p,{children:"The swagger UI provides a list of all available endpoints and their descriptions:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Swagger UI",src:t(6383).A+"",width:"2880",height:"1800"})}),"\n",(0,s.jsxs)(n.p,{children:["If we scroll down, we find a ",(0,s.jsx)(n.a,{href:"https://kernel-planckster.devmaany.com/docs#/Health%20Check/health_ping_get",children:"health check endpoint"}),' that can be used to check the status of the Kernel Planckster.\nIn general, to interact with any of the endpoints, we first expand the endpoint, and then click on the "Try it out" button:']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Try it out",src:t(1892).A+"",width:"2880",height:"1800"})}),"\n",(0,s.jsxs)(n.p,{children:['Then we click the "Execute" button to send the request, and the response will be displayed below.\nConventionally, a healthcheck endpoint may have the ',(0,s.jsx)(n.code,{children:"/ping"}),' URL path, and the response from the server will be a simple "pong" message.\nThat is, if the Kernel Plackster server is up and running, it will respond with a "pong" message when using this endpoint:']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'[\n  "pong"\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Pong!",src:t(4925).A+"",width:"2880",height:"1800"})}),"\n",(0,s.jsxs)(n.p,{children:["A more substantial check can be performed by using the example ",(0,s.jsx)(n.a,{href:"https://kernel-planckster.devmaany.com/docs#/Sum%20Feature/Sum_Feature_sum_get",children:"sum feature"}),', which will return the sum of two numbers.\nThis feature also illustrate how to input parameters into a request.\nTo do this, we click on the "Try it out" button, fill the required parameters, and click on "Execute":']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Sum feature",src:t(674).A+"",width:"2880",height:"1800"})}),"\n",(0,s.jsx)(n.p,{children:"If Kernel Planckster is running, it will return the expected response:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Four",src:t(1803).A+"",width:"2880",height:"1800"})}),"\n",(0,s.jsx)(n.h3,{id:"errors",children:"Errors"}),"\n",(0,s.jsx)(n.p,{children:"If for some reason Kernel Planckster cannot be reached but Swagger UI is still up, you will get an error response.\nIn this case, an error was triggered on purpose by disabling Internet connection:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Error",src:t(512).A+"",width:"2880",height:"1800"})}),"\n",(0,s.jsx)(n.p,{children:"However, if everything is down, then the link for Kernel Planckster will be broken and you will not even see the Swagger UI."}),"\n",(0,s.jsx)(n.h2,{id:"createregister-and-list-endpoints",children:"Create/Register and List Endpoints"}),"\n",(0,s.jsxs)(n.p,{children:["We can create new instances of any of our core concepts in Kernel Planckster's database using its API, except for ",(0,s.jsx)(n.code,{children:"Client"}),", as this feature is not available at the time of writing this guide.\nThat is, for example, using Kernel Planckster's API we can register ",(0,s.jsx)(n.code,{children:"Source Data"}),", create new ",(0,s.jsx)(n.code,{children:"Research Context"})," and ",(0,s.jsx)(n.code,{children:"Conversation"})," instances, and even create new ",(0,s.jsx)(n.code,{children:"Message"})," instances in the database (although this will not generate any LLM response, as that functionality is triggered by ",(0,s.jsx)(n.a,{href:"/planckster-docs/docs/guides/websat/websat-features-and-ui-walkthrough",children:"Websat"}),")."]}),"\n",(0,s.jsx)(n.p,{children:'Once we have instances of our core concepts in Kernel Planckster\'s database, we can list them with the "list" class of endpoints, by providing the input parameters required by the endpoint.'}),"\n",(0,s.jsx)(n.h2,{id:"schemas",children:"Schemas"}),"\n",(0,s.jsx)(n.p,{children:'Finally, scrolling down further takes us to the "Schemas" section of the Swagger UI.\nHere we\'ll find all of the data types managed by Kernel Planckster, and a breakdown of their attributes with their respective types.\nWe note that this list also contains our core concepts, as represented in Kernel Planckster in particular:'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Schemas",src:t(9798).A+"",width:"2880",height:"1800"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"View Model"}),' concept refers to the final output of a Kernel Planckster endpoint.\nThat is, a view model is the data structure we will receive as an endpoint output, and as such, there is a view model per endpoint, all listed in this section of the Swagger UI.\nSince an endpoint response can be a "success" or an "error", any specific view model contains optional attributes to capture relevant error information (such as an error message), to be able to provide useful context about any potential problem.\nThese optional error attributes are not used in case our endpoint response is a success:']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"View models",src:t(3412).A+"",width:"2880",height:"1800"})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"In this guide, we have covered the Kernel Planckster REST API and how to interact with it using Swagger UI.\nWe have seen how to check the status of Kernel Planckster, create new instances of our core concepts, and list the instances available in the database.\nWe have also seen the data types managed by Kernel Planckster and the view models that represent the output of the endpoints."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},6383:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/1-f622ff8dc9571d829e2935cd48964817.png"},1892:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/2-b67a0a2f874aaf20527602a9d2ef3fa8.png"},4925:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/3-d4c2df3c820c18cd5d164ad35f656091.png"},674:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/4-7fb13d11797fb7f843606585b880cf7f.png"},1803:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/5-27a1e72d021a1210fada978faca2ebfe.png"},512:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/6-b18353630c7cfd92fdb149f61c72bd0f.png"},9798:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/schemas-b3ca557467687f801435e27905f5486b.png"},3412:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/view-models-76c3490d740379d42dfe8d899a6336b2.png"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);